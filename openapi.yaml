openapi: 3.0.0
info:
  title: SWR Audio Lab - Radiohub
  description:
    "This documentation is also available as [openapi.json](https://docs.radiohub.swr.digital/openapi.json)\
    \ or [openapi.yaml](https://docs.radiohub.swr.digital/openapi.yaml).\n\n  \n\
    Authorization keys can be requested via [lab@swr.de](mailto:lab@swr.de) and shall\
    \ be sent as base64 encoded basic auth information in the header. Please report\
    \ all problems or bugs to [lab@swr.de](mailto:lab@swr.de) or via the [Github repo](https://github.com/swrlab/swr-radiohub-docs/issues)\
    \ and possibly include the `trace` information from the response header or info\
    \ object.\n\n The dev environment uses data from the dev database; staging and\
    \ production environments both access production data. The `appId` therefore follows\
    \ the same structure. Caching is separate for each stage."
  contact:
    name: SWR Audio Lab
    email: lab@swr.de
  license:
    name: Â© SWR Audio Lab
  version: 2.10.3
servers:
  - url: https://api.lab.swr.de/radiohub
    description: Radiohub production
  - url: https://api.lab.swr.de/radiohub-dev
    description: Radiohub development
  - url: https://api.lab.swr.de/radiohub-stage
    description: Radiohub staging
paths:
  /v2/content/page/{identifier}/{query}:
    get:
      tags:
        - content
      summary: Get a preconfigured content index page
      description: Receive all teaser elements for a custom page
      parameters:
        - name: identifier
          in: path
          description: Which identifier shall be used to query this content
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - ref
        - name: query
          in: path
          description: Page ref
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: app-news
        - name: appId
          in: query
          description:
            Provide a valid appId to create a connection to user preference
            and station
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentPageResponse"
      security:
        - BasicAuth: []
  /v2/content/block/{identifier}/{query}:
    get:
      tags:
        - content
      summary: Get a content.block index
      description: Receive the full content.block elements
      parameters:
        - name: identifier
          in: path
          description: Which identifier shall be used to query this content
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - id
        - name: query
          in: path
          description: Block ID
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: appId
          in: query
          description:
            Provide a valid appId to create a connection to user preference
            and station
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentBlockResponse"
      security:
        - BasicAuth: []
  /v2/content/collection/{identifier}/{query}:
    get:
      tags:
        - content
      summary: Get an entire content.collection
      description: Receive all recent entries for a content collection by their reference.
      parameters:
        - name: identifier
          in: path
          description: Which identifier shall be used to query this content
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - id
              - ref
        - name: query
          in: path
          description: Collection ref or ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: songtinder-sammler-100
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentCollectionResponse"
      security:
        - BasicAuth: []
  /v2/content/collection/latest/{identifier}/{query}/{offset}:
    get:
      tags:
        - content
      summary: Get latest content.entry from content.collection
      description: Receive a content object by the content collection id.
      parameters:
        - name: identifier
          in: path
          description: Which identifier shall be used to query this content
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - id
              - ref
        - name: query
          in: path
          description: Radiohub import ID
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: "4539478696787968"
        - name: offset
          in: path
          description:
            Offset to the newest item. 0 is newest, higher will be older
            items. Max value is defined by `offsetMax` in the info response object
          required: true
          style: simple
          explode: false
          schema:
            type: number
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentEntryResponse"
      security:
        - BasicAuth: []
  /v2/content/entry/{identifier}/{query}:
    get:
      tags:
        - content
      summary: Get a specific content.entry
      description: Receive a content.entry by id or ref.
      parameters:
        - name: identifier
          in: path
          description: Which identifier shall be used to query this content
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - id
              - ref
        - name: query
          in: path
          description: Radiohub ID or ref
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: "4539478696787968"
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/contentEntryResponse"
      security:
        - BasicAuth: []
  /v2/content/thumb/{ref}/{format}/img.jpg:
    get:
      tags:
        - content
        - images
      summary: Load a prefetched image from SWR CMS
      description:
        Load the original image or resized version. Uncached images will
        be generated and served from storage.
      parameters:
        - name: ref
          in: path
          description: Set ref for the image that shall be displayed (`thumbRef`).
          required: true
          style: simple
          explode: false
          schema:
            type: string
        - name: format
          in: path
          description: Set the aspect ratio for the image
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - 16x9
              - 1x1
        - name: width
          in: query
          description: Optional width in pixels that the image shall be resized to
          required: false
          style: form
          explode: true
          schema:
            maximum: 2560
            minimum: 2
            type: number
        - name: height
          in: query
          description:
            Optional height in pixels that the image shall be resized to.
            If both width and height are set, then the image will be cropped.  Otherwise
            the respectively opposite dimension is set to auto
          required: false
          style: form
          explode: true
          schema:
            maximum: 2560
            minimum: 2
            type: number
        - name: fileType
          in: query
          description:
            Force the output to a specific file type. If unset, the output
            will be jpg.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - jpg
              - png
              - webp
      responses:
        "400":
          description: Invalid query input
        "500":
          description: Server error occured or key not found.
        default:
          description: Image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
      servers:
        - url: https://api.lab.swr.de/
          description: This service is acessible through the primary path
  /v2/cover/{mdid}/:
    get:
      tags:
        - cover
      summary: Get a cover based on SWR's mdid
      description:
        Query Radiohub to get a cover for a played item based on a mdid
        reference.
      parameters:
        - name: mdid
          in: path
          description: SWR mdid (starts with M0...)
          required: true
          style: simple
          explode: false
          schema:
            type: string
          example: M0571919.001
        - name: width
          in: query
          description:
            Optionally set a desired width, if no height is provided, the
            cover stays square-sized, otherwise it will be cropped. Default if unset
            is 256px, max is 1024px.
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: height
          in: query
          description:
            Optionally set a desired height, if no width is provided, the
            cover stays square-sized, otherwise it will be cropped
          required: false
          style: form
          explode: true
          schema:
            type: integer
        - name: station
          in: query
          description:
            Apply a branding to the image. Branded covers are only available
            if this station has ever played that track.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - dasding
      responses:
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise the cover will be returned as image.
          content:
            image/*:
              schema:
                type: string
                format: binary
  /v2/feedback/station/:
    post:
      tags:
        - feedback
      summary: Publish an inbound feedback message
      description:
        Send a feedback message from an external device or platform to
        SWR's feedback system.
      parameters:
        - name: appId
          in: query
          description: Provide a valid `appId`.
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        description: |
          - When posting a feedback entry, `name` (body) and `appId` (query) are always required.
          - `city` is only optional for _dasding_, otherwise required as well.
          - Each post needs to contain either `file` or `message`.
          - The field `file` can be an image (e.g. jpg or png), audio (e.g. aac or mp3) or video (e.g. mp4 or mov) up to 50MB.
          - The station will be determined based on the user's `appId`.
        content:
          multipart/form-data:
            schema:
              $ref: "#/components/schemas/feedbackBody"
        required: true
      responses:
        "200":
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
        "400":
          description: Query not allowed or appId not provided.
        "413":
          description: File too large (>50MB).
        "500":
          description: Server error occured.
      security:
        - BasicAuth: []
  /images/v1/get/{key}/img:
    get:
      tags:
        - images
      summary: Load an image from image service
      description:
        Load the original image or resized version. A list of all keys
        can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for access.
        Uncached images will be generated and served from storage. See response header
        "swr-datasource" for details. Clients should also respect cache control if
        possible.
      parameters:
        - name: key
          in: path
          description: Set key for the image that shall be displayed.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: DASDING-512
        - name: width
          in: query
          description:
            "Optional width in pixels that the image shall be resized to.
            Minimum: 1, maximum 2560px"
          required: false
          style: form
          explode: true
          schema:
            maximum: 2560
            minimum: 2
            type: number
        - name: height
          in: query
          description:
            "Optional height in pixels that the image shall be resized to.
            Minimum: 1, maximum 2560px. If both width and height are set, then the image
            will be cropped. Otherwise the respectively opposite dimension is set to
            auto"
          required: false
          style: form
          explode: true
          schema:
            maximum: 2560
            minimum: 2
            type: number
        - name: fileType
          in: query
          description:
            Force the output to a specific file type. If unset, the output
            will match the input file type.
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - jpg
              - png
              - webp
      responses:
        "400":
          description: Invalid query input
        "500":
          description: Server error occured or key not found.
        default:
          description: Image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
            image/png:
              schema:
                type: string
                format: binary
            image/webp:
              schema:
                type: string
                format: binary
      servers:
        - url: https://api.lab.swr.de/
          description: This service is acessible through the primary path
  /images/v1/get/{key}/json:
    get:
      tags:
        - images
      summary: Receive details about a cacheable image
      description:
        Similar to the image service endpoint but here only a JSON object
        of the database entry will be served. Should only be used for debugging solutions,
        not to download an image. Accessibility of the sourceUrl is not guaranteed
        and will be limited in future versions.
      parameters:
        - name: key
          in: path
          description:
            Set key for the image that shall be displayed. A list of all
            keys can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for
            access.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: DASDING-512
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                type: object
      security:
        - BasicAuth: []
      servers:
        - url: https://api.lab.swr.de/
          description: This service is acessible through the primary path
  /swr2/images/get/{key}/{format}/{overlay}/{width}/img.jpg:
    get:
      tags:
        - images
      summary: Load an image from swr2 image service
      description:
        Load the original image or resized version. A list of all keys
        can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for access.
        Uncached images will be generated and served from storage. See response header
        "swr-datasource" for details. Clients should also respect cache control if
        possible.
      parameters:
        - name: key
          in: path
          description: Set key for the image that shall be displayed.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: logo
        - name: format
          in: path
          description:
            Set the aspect ratio for the image. rund is a 1x1 image which
            is title safe for round usage.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - 16x9
              - 4x3
              - 1x1
              - rund
        - name: overlay
          in: path
          description:
            Toggle whether a swr2 logo overlay shall be included. This feature
            is end of life and you should always request the 0 version.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - "0"
              - "1"
        - name: width
          in: path
          description: Width in pixels that the image shall be resized to
          required: true
          style: simple
          explode: false
          schema:
            maximum: 2560
            minimum: 2
            type: number
            example: 256
      responses:
        "400":
          description: Invalid query input
        "500":
          description: Server error occured or key not found.
        default:
          description: Image
          content:
            image/jpeg:
              schema:
                type: string
                format: binary
      servers:
        - url: https://api.lab.swr.de/
          description: This service is acessible through the primary path
  /swr2/images/get/{key}/json:
    get:
      tags:
        - images
      summary: Receive details about a cacheable image
      description:
        Similar to the swr2 image service endpoint but here only a JSON
        object of the database entry will be served. Should only be used for debugging
        solutions, not to download an image. Accessibility of the sourceUrl is not
        guaranteed and will be limited in future versions.
      parameters:
        - name: key
          in: path
          description:
            Set key for the image that shall be displayed. A list of all
            keys can be seen in the SWR Audio Lab dashboard. Contact lab@swr.de for
            access.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: logo
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                type: object
      security:
        - BasicAuth: []
      servers:
        - url: https://api.lab.swr.de/
          description: This service is acessible through the primary path
  /v2/schedule/live/{station}/:
    get:
      tags:
        - schedule
      summary: Receive the show that's live as scheduled
      description: Query Radiohub to get the current live show for a specific station.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scheduleResponse"
  /v2/schedule/day/{station}/{day}:
    get:
      tags:
        - schedule
      summary: Receive the show that's live as scheduled
      description: Query Radiohub to get the current live show for a specific station.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
        - name: day
          in: path
          description: Specify a certain date to be checked in the format YYYYMMDD.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "20191007"
      responses:
        "200":
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                minItems: 2
                type: array
                items:
                  $ref: "#/components/schemas/scheduleResponse"
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
      security:
        - BasicAuth: []
  /v2/schedule/time/{station}/{format}/{time}:
    get:
      tags:
        - schedule
      summary: Receive the show that's live as scheduled
      description:
        Query Radiohub based on a ms or s timestamp to get the show for
        a specific station.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
        - name: format
          in: path
          description: Choose whether to use a UNIX timestamp in seconds or milliseconds.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - ms
              - s
        - name: time
          in: path
          description: Timestamp in preferred format
          required: true
          style: simple
          explode: false
          schema:
            type: integer
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/scheduleResponse"
      security:
        - BasicAuth: []
  /v2/schedule/purge/{station}/:
    get:
      tags:
        - schedule
      summary: Purge cache information for a station
      description:
        Shall only be used in cases when meta information has been changed
        and needs to be re-cached.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/schedulePurgeResponse"
      security:
        - BasicAuth: []
  /v2/stream/start/{station}/:
    get:
      tags:
        - stream
      summary: Start a linear non-interactive radio stream based on station and parameters
      description: |-
        Linking service to provide the latest streamUrl with certain given parameters.

        For SWR classic an additional parameter `isLive` is provided in the JSON output (see example response below).

        Some requests require an authentication with special permissions (`swrRadiohubStreamStart`) - Especially responsive radio triggered by the y parameter, those responses also feature a different JSON structure.
        Note Interactive radio sessions no longer use this call.
      parameters:
        - name: station
          in: path
          description:
            "Set the radio station. \n\nNote that not all stations provide\
            \ all features such as video oder skippable radio."
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr3
              - dasding
              - swrclassic
        - name: r
          in: query
          description:
            "_(returnData)_ \n\nChoose whether to redirect to streamUrl or\
            \ receive JSON data object."
          required: false
          style: form
          explode: true
          schema:
            type: boolean
        - name: f
          in: query
          description:
            "_(desiredFormat)_ \n\nSet the streaming format. Note that video\
            \ is not available in combination with all queries. \n\nDefaults to mp3."
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - mp3
              - aac
              - video
        - name: q
          in: query
          description:
            "_(desiredQuality)_ \n\nSet the streaming quality. Note that\
            \ adaptive is only available for f=video while high and low are for mp3/aac.\n\
            \nDefaults to low."
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - high
              - low
              - adaptive
        - name: d
          in: query
          description:
            "_(deviceType)_ \n\nSet the type of device and/or aggregator.\
            \ Example list is not complete and only serves as a reference. Names are\
            \ provided by SWR Audio Lab."
          required: false
          style: form
          explode: true
          schema:
            type: string
            enum:
              - amazonAlexaSkill
              - googleHomeAction
              - swrClassicAppleTv
      responses:
        "400":
          description: Query not allowed.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                type: object
        x-swrclassic:
          description:
            Example of a result where `station` is `swrclassic` to signalize
            live modus.
          content:
            image/json:
              schema:
                type: object
                properties:
                  status:
                    type: integer
                    format: int64
                    example: 200
                  message:
                    type: string
                    description:
                      Message will be provided if status is not 200, otherwise
                      null
                  data:
                    type: object
                    properties:
                      isLive:
                        type: boolean
                        example: true
                      streamUrl:
                        type: string
                        example: https://...m3u8
                      streamTitle:
                        type: string
                        example: Live aus...
                      updatedAt:
                        type: integer
                        format: int64
                        example: 1563785270
                      airtimeStart:
                        type: integer
                        format: int64
                        example: 1563692428
                      airtimeEnd:
                        type: integer
                        format: int64
                        example: 1563859828
                  info:
                    $ref: "#/components/schemas/infoResponse"
                  links:
                    type: object
  /v2/stream/meta/:
    get:
      tags:
        - stream
      summary: Receive meta information about a current session
      description:
        All live information and meta data details that the system knows
        about a running audio session for the skippable radio platform.
      parameters:
        - name: appId
          in: query
          description: Provide a valid `appId`.
          required: true
          style: form
          explode: true
          schema:
            type: string
        - name: syncUrl
          in: query
          description:
            Provide the ybrid metadata Url to improve sync and buffer handling.
            Only provide the Url once and as quickly as possible after receiving it
            from ybrid.
          required: false
          style: form
          explode: true
          schema:
            type: string
        - name: isPlaying
          in: query
          description:
            If set to false, no radio session will be opened and only the
            basic metadata is provided
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            default: false
        - name: channelId
          in: query
          description:
            Start a session with a specified channel. Only applies when the
            user has no active session or previous call was `isPlaying=false`.
          required: false
          style: form
          explode: false
          schema:
            type: string
            example: swr-raka12
        - name: shiftJump
          in: query
          description:
            Automatically start a session at a specific timestamp. Can be
            combined with `channelId`. Only applies when user has no active session
            or previous call was `isPlaying=false`.
          required: false
          style: form
          explode: false
          schema:
            type: integer
            example: 1585366272000
      responses:
        "400":
          description: Query not allowed or appId not provided.
        "500":
          description: Server error occured
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/stream/shift/{action}/:
    get:
      tags:
        - stream
      summary: Control the timeshift position of a user's stream
      description:
        For a detailed workflow of responsive radio streams, see the STREAMING.md
        document in this repository.
      parameters:
        - name: action
          in: path
          description: The type of action for the livestream
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - jump
              - live
              - offset
              - back
              - ahead
        - name: appId
          in: query
          description: Always provide the user's appId for all responsive radio requests.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "400":
          description: Query not allowed or appId not provided.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/stream/shift/{action}/{time}:
    get:
      tags:
        - stream
      summary: Control the timeshift of a user's stream with time offset
      description:
        For a detailed workflow of responsive radio streams, see the STREAMING.md
        document in this repository.
      parameters:
        - name: action
          in: path
          description: The type of action for the livestream
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - jump
              - live
              - offset
              - back
              - ahead
        - name: time
          in: path
          description: The time difference if required by `action`
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: appId
          in: query
          description: Always provide the user's appId for all responsive radio requests.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "400":
          description: Query not allowed or appId not provided.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/stream/shift/{action}/{type}:
    get:
      tags:
        - stream
      summary: Jump to the timeshift position of a specific track type
      description:
        For a detailed workflow of responsive radio streams, see the STREAMING.md
        document in this repository.
      parameters:
        - name: action
          in: path
          description: The type of action for the livestream
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - back
              - ahead
        - name: type
          in: path
          description: The track type
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - music
              - advertisement
              - jingle
              - news
              - traffic
              - voice
              - weather
              - unrecognized
        - name: appId
          in: query
          description: Always provide the user's appId for all responsive radio requests.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "400":
          description: Query not allowed or appId not provided.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/stream/switch/skip:
    get:
      tags:
        - stream
      summary: Control the content of a user's stream by skipping
      description:
        For a detailed workflow of responsive radio streams, see the STREAMING.md
        document in this repository.
      parameters:
        - name: appId
          in: query
          description: Always provide the user's appId for all responsive radio requests.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "400":
          description: Query not allowed or appId not provided.
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/stream/switch/{action}/{id}:
    get:
      tags:
        - stream
      summary: Control the content of a user's stream
      description:
        For a detailed workflow of responsive radio streams, see the STREAMING.md
        document in this repository. When switching to a channel, provide the channel
        id, for news provide the channel id.
      parameters:
        - name: action
          in: path
          description: The type of action for the livestream
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - channel
              - news
        - name: id
          in: path
          description: The content id required for `action`
          required: true
          style: simple
          explode: false
          schema:
            type: integer
        - name: appId
          in: query
          description: Always provide the user's appId for all responsive radio requests.
          required: true
          style: form
          explode: true
          schema:
            type: string
      responses:
        "400":
          description: Query not allowed or appId not provided
        "500":
          description: Server error occured or key not found.
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/streamMetaResponse"
  /v2/track/live/{station}/:
    get:
      tags:
        - track
      summary: Receive the track that's playing right now
      description: Query Radiohub to get the current live show for a specific station.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trackResponse"
      security:
        - BasicAuth: []
  /v2/track/list/{station}/:
    get:
      tags:
        - track
      summary: Receive all tracks from the past 4 hours
      description:
        Query Radiohub to get the tracks from the past 4 hours for a specific
        station.
      parameters:
        - name: station
          in: path
          description: Set the radio station for the schedule query
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - swr1bw
              - swr1rp
              - swr2
              - swr3
              - swr4bw
              - swr4rp
              - swraktuell
              - dasding
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trackListResponse"
      security:
        - BasicAuth: []
  /v2/track/like/:
    post:
      tags:
        - track
      summary: Update the like-relationship between a track and a user (appId)
      description:
        Update the like or dislike status for a user. For `like` requests
        the `refPlaylistId` is required, for `dislike` requests `refMdId` is sufficient.
      parameters:
        - name: appId
          in: query
          description: Provide a valid `appId`.
          required: true
          style: form
          explode: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/body_1"
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/inline_response_default"
  /v2/traffic/search/{provider}/{roadName}/:
    get:
      tags:
        - traffic
      summary: Search for traffic incidents
      description: Query ARD Traffic (TPEG) via Radiohub to get a list of incidents.
      parameters:
        - name: provider
          in: path
          description:
            Set the ARD partner whose details shall be displayed. Set to
            ard for full output.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - ard
              - br
              - swr
              - ndr
              - hr
              - wdr
              - mdr
              - rbb
        - name: roadName
          in: path
          description:
            Comma, separated and url encoded list of road names, like A5
            or B10. Capitalization does not matter, however uppercase is preferred.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: A5,A8
        - name: includeLocation
          in: query
          description:
            "String-formatted boolean information whether the full GPS location
            shall be returned. Default if unset: false"
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            example: false
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trafficResponse"
      security:
        - BasicAuth: []
  /v2/traffic/geo/{provider}/{lat}/{lon}/:
    get:
      tags:
        - traffic
      summary: Get the neareast incidents
      description:
        Query ARD Traffic (TPEG) via Radiohub to get a list of incidents
        via supplied geo coordinates.
      parameters:
        - name: provider
          in: path
          description:
            Set the ARD partner whose details shall be displayed. Set to
            ard for full output.
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - ard
              - br
              - swr
              - ndr
              - hr
              - wdr
              - mdr
              - rbb
        - name: lat
          in: path
          description: Geo Latitude
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "48.767014"
        - name: lon
          in: path
          description: Geo Longitude
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "8.224037"
        - name: includeLocation
          in: query
          description:
            "String-formatted boolean information whether the full GPS location
            shall be returned. Default if unset: false."
          required: false
          style: form
          explode: true
          schema:
            type: boolean
            example: false
        - name: customRadius
          in: query
          description: "Radius in Kilometers that shall be used. Default if unset: 30."
          required: false
          style: form
          explode: true
          schema:
            type: string
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/trafficResponse"
      security:
        - BasicAuth: []
  /v2/user/app/register/{station}:
    get:
      tags:
        - user
      summary: Register an user device for appId access
      description:
        The `appId` is needed for all responsive radio actions. For a detailed
        workflow of responsive radio streams, see the STREAMING.md document in this
        repository.
      parameters:
        - name: station
          in: path
          description: The type of action for the livestream
          required: true
          style: simple
          explode: false
          schema:
            type: string
            enum:
              - dasding
              - swr3
      responses:
        "400":
          description: Query not allowed
        "500":
          description: Server error occured
        default:
          description: JSON object
          content:
            image/json:
              schema:
                $ref: "#/components/schemas/userAppRegisterResponse"
      security:
        - BasicAuth: []
  /v2/geo/search/:
    get:
      tags:
        - weather
      summary: Turn a location search into lat/lon
      description:
        Allow users to search for a location to receive lat/lon coordinates
        for weather queries. Devices are encouraged to save the lat/lon response to
        avoid having to query this API every time.
      parameters:
        - name: query
          in: query
          description: Location query
          required: true
          style: form
          explode: true
          schema:
            type: string
            example: Freiburg
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/geoSearchResponse"
    post:
      tags:
        - weather
      summary: Turn a location search into lat/lon
      description:
        Allow users to search for a location to receive lat/lon coordinates
        for weather queries. Devices are encouraged to save the lat/lon response to
        avoid having to query this API every time.
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/body"
        required: true
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/geoSearchResponse"
      security:
        - BasicAuth: []
  /v2/weather/geo/{lat}/{lon}/:
    get:
      tags:
        - weather
      summary: Get the weather
      description: Receive SWR's weather report for a specific geolocation.
      parameters:
        - name: lat
          in: path
          description: Geo Latitude
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "48.767014"
        - name: lon
          in: path
          description: Geo Longitude
          required: true
          style: simple
          explode: false
          schema:
            type: string
            example: "8.224037"
      responses:
        "401":
          description: Unauthorized access to API.
        "500":
          description: Server error occured.
        default:
          description:
            If status code other than 200, an error message will be provided,
            otherwise message is null.
          content:
            application/json:
              schema:
                type: object
      security:
        - BasicAuth: []
components:
  schemas:
    contentEntry:
      type: object
      properties:
        id:
          type: integer
          description:
            Unique identifier for this content element and import, can
            be used for further queries.
          example: 1234
        type:
          type: string
          description:
            Defines the type of content entry. Can be article, audio or
            video.
          example: content.entry.*
        link:
          type: string
          example: https://api.lab.swr.de/radiohub/v2/content/entry/id/1234?appId=56789
        sophoraRef:
          type: string
          example: av-o1083229-100
        sophoraCollectionRef:
          type: string
          example: songtinder-sammler-100
        station:
          type: string
          example: dasding
          enum:
            - swr1bw
            - swr1rp
            - swr2
            - swr3
            - swr4bw
            - swr4rp
            - dasding
        title:
          type: string
        subtitle:
          type: string
        teaser:
          type: string
        availabilityStart:
          type: integer
          example: 1575892066227
        availabilityEnd:
          type: integer
          example: 1733744866227
        updatedAt:
          type: integer
          example: 1575892066226
        durationInSeconds:
          type: integer
          example: 826
        durationReadable:
          type: string
          example: 14 Min
        articleUrl:
          type: string
        webUrl:
          type: string
        isDownloadable:
          type: boolean
          example: true
        sourceDownloadUrl:
          type: string
          example: https://avdlswr-a.akamaihd.net/dasding/...
        sourcePlaybackUrl:
          type: string
          example: https://pdodswr-a.akamaihd.net/dasding/...
        thumbAlt:
          type: string
          example: Bosse
        thumbCredit:
          type: string
          example: DASDING
        thumbRef:
          type: string
    contentCollection:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this content.collection
          example: 1234
        type:
          type: string
          description: Defines the type of content.collection.
          example: content.collection.*
        link:
          type: string
          example: https://api.lab.swr.de/radiohub/v2/content/collection/id/1234?appId=56789
        title:
          type: string
        subtitle:
          type: string
        data:
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/contentEntry"
      description: Content collections are a parent element to content.entry
    contentBlockBreaking:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this content block
          example: 1234
        type:
          type: string
          description: Defines the type of content block.
          example: content.block.breaking
        link:
          type: string
          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789
        title:
          type: string
        subtitle:
          type: string
          nullable: true
        data:
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/contentBlockBreaking_data"
    contentBlockPodcast:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this content block
          example: 1234
        type:
          type: string
          description: Defines the type of content block.
          example: content.block.podcast
        link:
          type: string
          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789
        title:
          type: string
        subtitle:
          type: string
        data:
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/contentCollection"
    contentBlock:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for this content block
          example: 1234
        type:
          type: string
          description:
            Defines the type of content block. Can be article, audio or
            video.
          example: content.block.*
        link:
          type: string
          example: https://api.lab.swr.de/radiohub/v2/content/block/id/1234?appId=56789
        title:
          type: string
        subtitle:
          type: string
        data:
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/contentEntry"
    contentEntryResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
          nullable: true
        data:
          $ref: "#/components/schemas/contentEntry"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
    contentCollectionResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
          nullable: true
        data:
          $ref: "#/components/schemas/contentCollection"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
    contentBlockResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
          nullable: true
        data:
          oneOf:
            - $ref: "#/components/schemas/contentBlockBreaking"
            - $ref: "#/components/schemas/contentBlockPodcast"
            - $ref: "#/components/schemas/contentBlock"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
    contentPageResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
          nullable: true
        data:
          type: array
          items:
            anyOf:
              - $ref: "#/components/schemas/contentBlockBreaking"
              - $ref: "#/components/schemas/contentBlockPodcast"
              - $ref: "#/components/schemas/contentBlock"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
    feedbackBody:
      required:
        - name
      type: object
      properties:
        name:
          type: string
        email:
          type: string
        phone:
          type: string
        city:
          type: string
        message:
          type: string
        file:
          type: string
          format: binary
    geoSearchData:
      type: object
      properties:
        name:
          type: string
          example: Freiburg im Breisgau
        city:
          type: string
          example: Freiburg im Breisgau
        area:
          type: string
          example: Freiburg im Breisgau
        state:
          type: string
          example: Baden-WÃ¼rttemberg
        country:
          type: string
          example: Deutschland
        countryCode:
          type: string
          example: DE
        lat:
          type: number
          format: double
          example: 47.99719
        lon:
          type: number
          format: double
          example: 7.85377
        type:
          type: string
          example: city
    geoSearchResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          maxItems: 10
          minItems: 0
          type: array
          items:
            $ref: "#/components/schemas/geoSearchData"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          $ref: "#/components/schemas/scheduleResponse_links"
      description: Defines a schedule response
    infoResponse:
      type: object
      properties:
        trace:
          type: string
          example: xyz
        service:
          type: string
          example: swr-radiohub-api-dev;dev;...
      description: Defines a schedule response
    scheduleResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          $ref: "#/components/schemas/scheduleResponse_data"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          $ref: "#/components/schemas/scheduleResponse_links"
      description: Defines a schedule response
    scheduleResponseImage:
      type: object
      properties:
        type:
          type: string
          description: The type of image service this image can be fetched from
          example: images
          enum:
            - images
            - content
        ref:
          type: string
          description: Image ref to be used with the image service
          example: SWR3-mod-BarschJanitz
    scheduleResponseTextLongform:
      type: object
      properties:
        text:
          type: string
          example: Line 1
        underline:
          type: boolean
          example: false
        italic:
          type: boolean
          example: false
        bold:
          type: boolean
          example: false
    scheduleResponseAnchorList:
      type: object
      properties:
        name:
          type: string
        imageUrl:
          type: string
        image:
          $ref: "#/components/schemas/scheduleResponseImage"
        webUrl:
          type: string
          nullable: true
    scheduleResponse_data:
      type: object
      properties:
        title:
          type: string
          example: Nachrichten
        subtitle:
          type: string
        airtimeStart:
          type: integer
        airtimeEnd:
          type: integer
        updatedAt:
          type: integer
        thumbUrl:
          type: string
        isThumbAvailable:
          type: boolean
          example: false
        anchorImageUrl:
          type: string
          nullable: true
        anchorList:
          minItems: 0
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/scheduleResponseAnchorList"
        textLongform:
          type: array
          items:
            $ref: "#/components/schemas/scheduleResponseTextLongform"
        programId:
          type: integer
          nullable: true
        ref:
          type: integer
          example: 2906737
    scheduleResponse_links:
      type: object
      properties:
        purge:
          type: string
    schedulePurgeResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 201
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          $ref: "#/components/schemas/schedulePurgeResponse_data"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          $ref: "#/components/schemas/scheduleResponse_links"
      description: Defines a schedule response after purging
    schedulePurgeResponse_data:
      type: object
      properties:
        key:
          type: string
        response:
          type: string
    trackObject:
      type: object
      properties:
        displayTitle:
          type: string
          example: Post Malone
        displayArtist:
          type: string
          example: Sam Feldt feat. RANI
        type:
          type: string
          example: music
          enum:
            - music
            - advertisement
            - jingle
            - news
            - traffic
            - voice
            - weather
            - unrecognized
        triggeredAtMs:
          type: integer
          description: Item recorded in database (UNIX-ms)
          example: 1576081213585
        playedAtMs:
          type: integer
          description: Item playback time (UNIX-ms)
          example: 1576081210000
        refPlaylistId:
          type: integer
          description: Unique ID within a station to reference a played track
          example: 11112403
        refMdId:
          type: string
          description: SWR metadata ID to reference a track
          example: M0571440.001
        durationPlan:
          type: integer
          description: For how long the track is schedule to be played back on air
          example: 173
    trackResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          $ref: "#/components/schemas/trackObject"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          $ref: "#/components/schemas/trackResponse_links"
      description: Defines a track response
    trackResponse_links:
      type: object
      properties:
        cover:
          type: string
    trackListResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          maxItems: 100
          minItems: 1
          type: array
          items:
            $ref: "#/components/schemas/trackObject"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
      description: Defines a track response
    trafficResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          type: array
          items:
            $ref: "#/components/schemas/trafficResponse_data"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          $ref: "#/components/schemas/trackResponse_links"
      description: Defines a track response
    trafficResponse_geoPoint:
      maxItems: 3
      minItems: 2
      type: array
      description: Defines a schedule response
      example:
        - 52.3782
        - 4.8999
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      items:
        type: number
        format: double
    trafficResponse_locationBox:
      type: object
      properties:
        a:
          $ref: "#/components/schemas/trafficResponse_geoPoint"
        b:
          $ref: "#/components/schemas/trafficResponse_geoPoint"
      description: Bounding box of the entire incident.
    trafficResponse_data:
      type: object
      properties:
        ticId:
          type: string
          description: Uniquely identifies a traffic incident.
        urgency:
          type: integer
          description: Describes the level of the incident. 1 is normal, 2 is a warning.
          example: 1
        type:
          type: string
          example: construction
          enum:
            - warning
            - construction
            - congestion
            - other
        createdAt:
          type: integer
          description: UNIX timestamp when the incident was created.
          example: 1559627077
        text:
          type: string
          description: Written text about the incident.
        provider:
          type: string
          description: LRA (Landesrundfunkanstalt) that submitted the information.
          example: SWR
        roadName:
          type: string
          description:
            Comma-separated string with all included roads. Usually just
            one, but in rare cases, can be multiple ones. Can be null if road is not
            well-known (city street, diversion).
          nullable: true
          example: A5
        roadNameArray:
          type: array
          description: Array-formatted data of roadName.
          items:
            type: string
            example: A5
        locationType:
          type: string
          description:
            Describes the type of Geo information. Multi* locations include
            a second point or string (usually the reverse route of a road).
          example: LineString
          enum:
            - Point
            - LineString
            - MultiPoint
            - MultiLineString
        locationBox:
          $ref: "#/components/schemas/trafficResponse_locationBox"
        location:
          minItems: 1
          type: array
          description: Geo information for point or line.
          nullable: true
          items:
            $ref: "#/components/schemas/trafficResponse_geoPoint"
        distance:
          type: number
          description: Only supplied when querying by geo coordinates.
          format: double
          nullable: true
    userAppRegisterResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          $ref: "#/components/schemas/userAppRegisterResponse_data"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
      description: Defines a track response
    streamMetaSession:
      type: object
      properties:
        streamUrl:
          type: string
        hasChanged:
          type: boolean
          description:
            Whether the streamUrl has changed since the last meta call.
            In that case the new Url shall be reloaded in the audio player.
          example: false
    streamMetaMetaChannelOptions:
      type: object
      properties:
        swr3-live:
          $ref: "#/components/schemas/streamMetaMetaChannelOptions_swr3live"
      description: One or more channels than can be played
    streamMetaMetaSkip:
      type: object
      properties:
        active:
          type: boolean
          description: Is skipping currently active?
          default: false
        available:
          type: boolean
          description: Is skipping generally available at the moment?
          default: false
        index:
          type: integer
          example: 0
        remaining:
          type: integer
          example: 3
      description: One or more channels than can be played
    streamMetaMetaWave:
      type: object
      properties:
        secondsPerSample:
          type: integer
          description: How many seconds were processed for each sample
          example: 15
        length:
          type: integer
          description: Count of all data samples
          example: 239
        min:
          type: number
          description: Smallest sample size for scaling the waveform
          format: double
          example: 0.00085
        max:
          type: number
          description: Largest sample size for scaling the waveform
          format: double
          example: 0.01744
        updatedAt:
          type: integer
          description: Timestamp of the data generation
          example: 1582816851938
        data:
          type: array
          description: All samples, newest ones are first
          example: 0.0025184983
          items:
            type: number
            format: double
      description:
        Live waveform data, generated historically for the entire timeshift
        period
      nullable: true
    streamMetaMetaScheduleNow:
      type: object
      properties:
        title:
          type: string
          example: Club
        subtitle:
          type: string
        airtimeStart:
          type: integer
        airtimeEnd:
          type: integer
        updatedAt:
          type: integer
        thumbUrl:
          type: string
          nullable: true
        thumb:
          $ref: "#/components/schemas/scheduleResponseImage"
        webUrl:
          type: string
          nullable: true
        anchorImageUrl:
          type: string
        anchorImage:
          $ref: "#/components/schemas/scheduleResponseImage"
        anchorList:
          minItems: 0
          type: array
          nullable: true
          items:
            $ref: "#/components/schemas/scheduleResponseAnchorList"
        ref:
          type: integer
      description: Schedule item which was on air at the user's playback position
    streamMetaMeta:
      type: object
      properties:
        playerActions:
          minItems: 0
          type: array
          example:
            - togglePlay
            - shiftOffsetBack
            - shiftOffsetAhead
            - shiftBack
            - shiftAhead
            - shiftLive
          items:
            type: string
        channelActive:
          type: string
          example: swr3-live
        channelMain:
          type: string
          example: swr3-live
        channelOptions:
          $ref: "#/components/schemas/streamMetaMetaChannelOptions"
        shiftOffset:
          type: integer
          example: 0
        skip:
          $ref: "#/components/schemas/streamMetaMetaSkip"
        trackNow:
          $ref: "#/components/schemas/trackObject"
        trackNext:
          nullable: true
          allOf:
            - $ref: "#/components/schemas/trackObject"
            - type: object
        trackList:
          type: array
          description:
            Array of tracks that have been played over the past 4 hours.
            The most recent one is the first element, after that it goes back in time.
          items:
            $ref: "#/components/schemas/trackObject"
        wave:
          $ref: "#/components/schemas/streamMetaMetaWave"
        scheduleNow:
          $ref: "#/components/schemas/streamMetaMetaScheduleNow"
    streamMetaResponse:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          $ref: "#/components/schemas/streamMetaResponse_data"
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
      description: Defines a radio meta response
    userAppRegisterResponse_data:
      type: object
      properties:
        id:
          type: integer
        station:
          type: string
          enum:
            - dasding
            - swr3
    body:
      type: object
      properties:
        query:
          type: string
          example: Freiburg
    body_1:
      required:
        - action
      type: object
      properties:
        action:
          type: string
          enum:
            - like
            - dislike
        refPlaylistId:
          type: string
        refMdId:
          type: string
    inline_response_default:
      type: object
      properties:
        status:
          type: integer
          format: int64
          example: 200
        message:
          type: string
          description: Message will be provided if status is not 200, otherwise null
        data:
          type: object
        info:
          $ref: "#/components/schemas/infoResponse"
        links:
          type: object
    contentBlockBreaking_data:
      type: object
      properties:
        id:
          type: integer
          description:
            Unique identifier for this content element and import, can
            be used for further queries.
          example: 1234
        type:
          type: string
          description:
            Defines the type of content entry. Can be article, audio or
            video.
          example: content.entry.breaking
        title:
          type: string
        subtitle:
          type: string
          example: Song-Tindern
        teaser:
          type: string
        availabilityStart:
          type: integer
          example: 1575892066227
        availabilityEnd:
          type: integer
          example: 1733744866227
        articleUrl:
          type: string
          nullable: true
        webUrl:
          type: string
          nullable: true
        thumbAlt:
          type: string
          nullable: true
          example: Bosse
        thumbCredit:
          type: string
          nullable: true
          example: DASDING
        thumbRef:
          type: string
          nullable: true
    streamMetaMetaChannelOptions_swr3live:
      type: object
      properties:
        title:
          type: string
          example: SWR3 Livestream
        id:
          type: string
          example: swr3-live
        iconRef:
          type: string
          example: SWR3-channel-live-1x1
    streamMetaResponse_data:
      type: object
      properties:
        session:
          $ref: "#/components/schemas/streamMetaSession"
        meta:
          $ref: "#/components/schemas/streamMetaMeta"
  securitySchemes:
    BasicAuth:
      type: http
      scheme: basic
